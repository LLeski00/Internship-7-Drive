// <auto-generated />
using System;
using Drive.Data.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Drive.Data.Migrations
{
    [DbContext(typeof(DriveDbContext))]
    partial class DriveDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Drive.Data.Entities.Models.File", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastChanged")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.Property<int>("ParentFolderId")
                        .HasColumnType("integer");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ParentFolderId");

                    b.ToTable("Files");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Some random text.",
                            CreatedOn = new DateTime(2025, 1, 2, 22, 2, 43, 249, DateTimeKind.Utc).AddTicks(9313),
                            Extension = "txt",
                            LastChanged = new DateTime(2025, 1, 2, 22, 2, 43, 249, DateTimeKind.Utc).AddTicks(9316),
                            Name = "TodoList",
                            OwnerId = 1,
                            ParentFolderId = 1,
                            Size = 20L
                        },
                        new
                        {
                            Id = 2,
                            Content = "Some random text.",
                            CreatedOn = new DateTime(2025, 1, 2, 22, 2, 43, 249, DateTimeKind.Utc).AddTicks(9320),
                            Extension = "txt",
                            LastChanged = new DateTime(2025, 1, 2, 22, 2, 43, 249, DateTimeKind.Utc).AddTicks(9321),
                            Name = "TodoList2",
                            OwnerId = 1,
                            ParentFolderId = 1,
                            Size = 20L
                        },
                        new
                        {
                            Id = 3,
                            Content = "Some random text.",
                            CreatedOn = new DateTime(2025, 1, 2, 22, 2, 43, 249, DateTimeKind.Utc).AddTicks(9322),
                            Extension = "txt",
                            LastChanged = new DateTime(2025, 1, 2, 22, 2, 43, 249, DateTimeKind.Utc).AddTicks(9322),
                            Name = "TodoList3",
                            OwnerId = 1,
                            ParentFolderId = 2,
                            Size = 20L
                        },
                        new
                        {
                            Id = 4,
                            Content = "Some random text.",
                            CreatedOn = new DateTime(2025, 1, 2, 22, 2, 43, 249, DateTimeKind.Utc).AddTicks(9324),
                            Extension = "txt",
                            LastChanged = new DateTime(2025, 1, 2, 22, 2, 43, 249, DateTimeKind.Utc).AddTicks(9324),
                            Name = "TodoList4",
                            OwnerId = 2,
                            ParentFolderId = 4,
                            Size = 20L
                        },
                        new
                        {
                            Id = 5,
                            Content = "Some random text.",
                            CreatedOn = new DateTime(2025, 1, 2, 22, 2, 43, 249, DateTimeKind.Utc).AddTicks(9325),
                            Extension = "txt",
                            LastChanged = new DateTime(2025, 1, 2, 22, 2, 43, 249, DateTimeKind.Utc).AddTicks(9325),
                            Name = "TodoList5",
                            OwnerId = 2,
                            ParentFolderId = 5,
                            Size = 20L
                        });
                });

            modelBuilder.Entity("Drive.Data.Entities.Models.FileComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FileId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastChanged")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("FileId");

                    b.ToTable("FileComments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            Content = "Some random comment",
                            CreatedOn = new DateTime(2025, 1, 2, 22, 2, 43, 249, DateTimeKind.Utc).AddTicks(9438),
                            FileId = 1,
                            LastChanged = new DateTime(2025, 1, 2, 22, 2, 43, 249, DateTimeKind.Utc).AddTicks(9438)
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 2,
                            Content = "Even more random comment",
                            CreatedOn = new DateTime(2025, 1, 2, 22, 2, 43, 249, DateTimeKind.Utc).AddTicks(9441),
                            FileId = 1,
                            LastChanged = new DateTime(2025, 1, 2, 22, 2, 43, 249, DateTimeKind.Utc).AddTicks(9441)
                        });
                });

            modelBuilder.Entity("Drive.Data.Entities.Models.Folder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.Property<int?>("ParentFolderId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ParentFolderId");

                    b.HasIndex("OwnerId", "ParentFolderId")
                        .IsUnique()
                        .HasFilter("\"ParentFolderId\" IS NULL");

                    b.ToTable("Folders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "root",
                            OwnerId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "obj",
                            OwnerId = 1,
                            ParentFolderId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "bin",
                            OwnerId = 1,
                            ParentFolderId = 1
                        },
                        new
                        {
                            Id = 4,
                            Name = "root",
                            OwnerId = 2
                        },
                        new
                        {
                            Id = 5,
                            Name = "new",
                            OwnerId = 2,
                            ParentFolderId = 4
                        },
                        new
                        {
                            Id = 6,
                            Name = "some",
                            OwnerId = 2,
                            ParentFolderId = 4
                        });
                });

            modelBuilder.Entity("Drive.Data.Entities.Models.SharedFile", b =>
                {
                    b.Property<int>("FileId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("FileId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("SharedFiles");

                    b.HasData(
                        new
                        {
                            FileId = 4,
                            UserId = 1
                        },
                        new
                        {
                            FileId = 5,
                            UserId = 1
                        },
                        new
                        {
                            FileId = 1,
                            UserId = 2
                        },
                        new
                        {
                            FileId = 3,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("Drive.Data.Entities.Models.SharedFolder", b =>
                {
                    b.Property<int>("FolderId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("FolderId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("SharedFolders");

                    b.HasData(
                        new
                        {
                            FolderId = 5,
                            UserId = 1
                        },
                        new
                        {
                            FolderId = 2,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("Drive.Data.Entities.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "kimi@gmail.com",
                            FirstName = "Kimi",
                            LastName = "Raikonen",
                            Password = "1234"
                        },
                        new
                        {
                            Id = 2,
                            Email = "seb@gmail.com",
                            FirstName = "Sebastian",
                            LastName = "Vettel",
                            Password = "1234"
                        });
                });

            modelBuilder.Entity("Drive.Data.Entities.Models.File", b =>
                {
                    b.HasOne("Drive.Data.Entities.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Drive.Data.Entities.Models.Folder", "ParentFolder")
                        .WithMany()
                        .HasForeignKey("ParentFolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("ParentFolder");
                });

            modelBuilder.Entity("Drive.Data.Entities.Models.FileComment", b =>
                {
                    b.HasOne("Drive.Data.Entities.Models.User", "Author")
                        .WithMany("Comments")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Drive.Data.Entities.Models.File", "File")
                        .WithMany("Comments")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("File");
                });

            modelBuilder.Entity("Drive.Data.Entities.Models.Folder", b =>
                {
                    b.HasOne("Drive.Data.Entities.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Drive.Data.Entities.Models.Folder", "ParentFolder")
                        .WithMany()
                        .HasForeignKey("ParentFolderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Owner");

                    b.Navigation("ParentFolder");
                });

            modelBuilder.Entity("Drive.Data.Entities.Models.SharedFile", b =>
                {
                    b.HasOne("Drive.Data.Entities.Models.File", "File")
                        .WithMany("SharedFiles")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Drive.Data.Entities.Models.User", "User")
                        .WithMany("SharedFiles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Drive.Data.Entities.Models.SharedFolder", b =>
                {
                    b.HasOne("Drive.Data.Entities.Models.Folder", "Folder")
                        .WithMany("SharedFolders")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Drive.Data.Entities.Models.User", "User")
                        .WithMany("SharedFolders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Folder");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Drive.Data.Entities.Models.File", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("SharedFiles");
                });

            modelBuilder.Entity("Drive.Data.Entities.Models.Folder", b =>
                {
                    b.Navigation("SharedFolders");
                });

            modelBuilder.Entity("Drive.Data.Entities.Models.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("SharedFiles");

                    b.Navigation("SharedFolders");
                });
#pragma warning restore 612, 618
        }
    }
}
